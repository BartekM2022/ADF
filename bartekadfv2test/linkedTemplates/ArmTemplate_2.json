{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "bartekadfv2test"
		},
		"tr_ingest_population_data_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/dde21fce-86d3-4497-955b-c106ca7cae40/resourceGroups/Test/providers/Microsoft.Storage/storageAccounts/reportingsabartek"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/RawDataTranform')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_cases_and_deaths",
								"type": "DatasetReference"
							},
							"name": "RawDataSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MaxPerCountry",
								"type": "DatasetReference"
							},
							"name": "TransformDestination"
						}
					],
					"transformations": [
						{
							"name": "SelectColumnsForAgregation"
						},
						{
							"name": "MaxCount"
						},
						{
							"name": "SortByCountry"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code as string,",
						"          continent as string,",
						"          population as string,",
						"          indicator as string,",
						"          daily_count as integer,",
						"          date as string,",
						"          rate_14_day as string,",
						"          source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> RawDataSource",
						"RawDataSource select(mapColumn(",
						"          country,",
						"          indicator,",
						"          daily_count",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumnsForAgregation",
						"SelectColumnsForAgregation aggregate(groupBy(country,",
						"          indicator),",
						"     {Max Per Country} = max(daily_count)) ~> MaxCount",
						"MaxCount sort(asc(country, true)) ~> SortByCountry",
						"SortByCountry sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> TransformDestination"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_cases_deaths')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_cases_and_deaths",
								"type": "DatasetReference"
							},
							"name": "CasesAndDeathsSource"
						},
						{
							"dataset": {
								"referenceName": "ds_country_lookup",
								"type": "DatasetReference"
							},
							"name": "CountryLookup"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_processed_cases_and_deatchs",
								"type": "DatasetReference"
							},
							"name": "CasesAndDeathsSink"
						}
					],
					"transformations": [
						{
							"name": "FilterEuropeOnly"
						},
						{
							"name": "SelectOnlyRequiredFields"
						},
						{
							"name": "PivotCounts"
						},
						{
							"name": "LookupCountry"
						},
						{
							"name": "SelectForSink"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code as string,",
						"          continent as string,",
						"          population as integer,",
						"          indicator as string,",
						"          daily_count as integer,",
						"          date as date,",
						"          rate_14_day as double,",
						"          source as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CasesAndDeathsSource",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CountryLookup",
						"CasesAndDeathsSource filter(continent == 'Europe'&&not(isNull(country_code))) ~> FilterEuropeOnly",
						"FilterEuropeOnly select(mapColumn(",
						"          country,",
						"          country_code,",
						"          population,",
						"          indicator,",
						"          daily_count,",
						"          source,",
						"          each(match(name=='date'),",
						"               'reported'+'_date' = $$)",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectOnlyRequiredFields",
						"SelectOnlyRequiredFields pivot(groupBy(country,",
						"          country_code,",
						"          population,",
						"          source,",
						"          reported_date),",
						"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
						"     count = sum(daily_count),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> PivotCounts",
						"PivotCounts, CountryLookup lookup(PivotCounts@country == CountryLookup@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCountry",
						"LookupCountry select(mapColumn(",
						"          country = PivotCounts@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population = PivotCounts@population,",
						"          cases_count = {confirmed cases_count},",
						"          deaths_count,",
						"          reported_date,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> SelectForSink",
						"SelectForSink sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0764,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> CasesAndDeathsSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_transform_hospital_admissions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_raw_hospital_admision",
								"type": "DatasetReference"
							},
							"name": "HospitalAdmissionsSource"
						},
						{
							"dataset": {
								"referenceName": "ds_country_lookup",
								"type": "DatasetReference"
							},
							"name": "CountrySource"
						},
						{
							"dataset": {
								"referenceName": "ds_date_dim_lookup",
								"type": "DatasetReference"
							},
							"name": "DimDateSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_processed_hospital_admision_weekly",
								"type": "DatasetReference"
							},
							"name": "WeeklySink"
						},
						{
							"dataset": {
								"referenceName": "ds_processed_hospital_admision_daily",
								"type": "DatasetReference"
							},
							"name": "DailySink"
						}
					],
					"transformations": [
						{
							"name": "SelectReqdFields"
						},
						{
							"name": "LookupCountry"
						},
						{
							"name": "SelectReqdFields2"
						},
						{
							"name": "SplitDailyFromWeekly"
						},
						{
							"name": "DeriveECDCYearWeek"
						},
						{
							"name": "AggDimDate"
						},
						{
							"name": "JoinWithDate"
						},
						{
							"name": "PivotWeekly"
						},
						{
							"name": "PivotDaily"
						},
						{
							"name": "SortWeekly"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          indicator as string,",
						"          date as string,",
						"          year_week as string,",
						"          value as double,",
						"          source as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HospitalAdmissionsSource",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CountrySource",
						"source(output(",
						"          date_key as string,",
						"          date as string,",
						"          year as string,",
						"          month as string,",
						"          day as string,",
						"          day_name as string,",
						"          day_of_year as string,",
						"          week_of_month as string,",
						"          week_of_year as string,",
						"          month_name as string,",
						"          year_month as string,",
						"          year_week as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DimDateSource",
						"HospitalAdmissionsSource select(mapColumn(",
						"          country,",
						"          indicator,",
						"          reported_date = date,",
						"          reported_year_week = year_week,",
						"          value,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReqdFields",
						"SelectReqdFields, CountrySource lookup(SelectReqdFields@country == CountrySource@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCountry",
						"LookupCountry select(mapColumn(",
						"          country = SelectReqdFields@country,",
						"          indicator,",
						"          reported_date,",
						"          reported_year_week,",
						"          value,",
						"          source,",
						"          country = CountrySource@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectReqdFields2",
						"SelectReqdFields2 split(indicator =='Weekly new hospital admissions per 100k'||indicator=='Weekly new ICU admissions per 100k',",
						"     disjoint: false) ~> SplitDailyFromWeekly@(Weekly, Daily)",
						"DimDateSource derive(ecdc_year_week = year + '-W'+lpad(week_of_year,2,'0')) ~> DeriveECDCYearWeek",
						"DeriveECDCYearWeek aggregate(groupBy(ecdc_year_week),",
						"     week_start_date = min(date),",
						"          week_end_date = max(date)) ~> AggDimDate",
						"SplitDailyFromWeekly@Weekly, AggDimDate join(reported_year_week == ecdc_year_week,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinWithDate",
						"JoinWithDate pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_year_week,",
						"          source),",
						"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
						"     count = sum(value),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> PivotWeekly",
						"SplitDailyFromWeekly@Daily pivot(groupBy(country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population,",
						"          reported_date,",
						"          source),",
						"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
						"     count = sum(value),",
						"     columnNaming: '$V_$N',",
						"     lateral: true) ~> PivotDaily",
						"PivotWeekly sort(desc(reported_year_week, true),",
						"     asc(country, true)) ~> SortWeekly",
						"SortWeekly sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> WeeklySink",
						"PivotDaily sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> DailySink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sqlize_hospital_admision_daily_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Hospital Admision Daily",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [covid_reporting].[hospital_admissions_daily]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "country",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "country",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "country_code_2_digit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "country_code_2_digit",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "country_code_3_digit",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "country_code_3_digit",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "population",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "population",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "reported_date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "reported_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "Daily hospital occupancy_count",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "hospital_occupancy_count",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "Daily ICU occupancy_count",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "icu_occupancy_count",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "source",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "source",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_processed_hospital_admision_daily",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_hospital_admission_daily",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_sql_testing')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Testing",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [covid_reporting].[testing]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"parallelCopies": 1,
							"dataIntegrationUnits": 2,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "country",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "country_code_2_digit",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "country_code_3_digit",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "year_week",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "week_start_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "week_end_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "new_cases",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "tests_done",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "population",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "testing_data_source",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_processed_testing",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sql_testing",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeltaLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DeltaLoad",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DeltaLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Staging": {},
									"Inventory": {},
									"InventorySink": {},
									"InventorySinkInsert": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-25T12:31:57Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Functions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Functions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Functions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EmpTran": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-25T15:50:07Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaxCasesPerCountry')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaxCasesPerCountry",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RawDataTranform",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RawDataSource": {},
									"TransformDestination": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/RawDataTranform')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_cases_and_deaths_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_transform_cases_deaths",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_cases_deaths",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CasesAndDeathsSource": {},
									"CountryLookup": {},
									"CasesAndDeathsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-30T13:54:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_transform_cases_deaths')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_hospital_admision')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_transform_hospital_admision",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_transform_hospital_admissions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"HospitalAdmissionsSource": {},
									"CountrySource": {},
									"DimDateSource": {},
									"WeeklySink": {},
									"DailySink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_transform_hospital_admissions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_ingest_population_data')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_ingest_population_data",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/population/blobs/population_by_age.tsv.gz",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('tr_ingest_population_data_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		}
	]
}